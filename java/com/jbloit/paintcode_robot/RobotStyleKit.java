package com.jbloit.paintcode_robot;

import android.graphics.Paint;
import android.graphics.Matrix;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import java.util.Stack;



/**
 * Created by Julien Bloit on Jun 14, 2018.
 * Copyright Â© 2018 jbloit.com. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Julien Bloit
 */
public class RobotStyleKit {
    
    
    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }
    
    // Canvas Drawings
    // Tab
    
    private static class CacheForRobot {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 249f, 256f);
        private static RectF resizedFrame = new RectF();
        private static RectF rectangleRect = new RectF();
        private static Path rectanglePath = new Path();
        private static float[] rectangleCornerRadii = new float[8];
        private static RectF rectangle2Rect = new RectF();
        private static Path rectangle2Path = new Path();
        private static RectF rectangle3Rect = new RectF();
        private static Path rectangle3Path = new Path();
        private static RectF rectangle4Rect = new RectF();
        private static Path rectangle4Path = new Path();
        private static RectF rectangle5Rect = new RectF();
        private static Path rectangle5Path = new Path();
        private static RectF bezier2Rect = new RectF();
        private static Path bezier2Path = new Path();
    }
    
    public static void drawRobot(Canvas canvas, int robotColor, float armAngle) {
        RobotStyleKit.drawRobot(canvas, new RectF(0f, 0f, 249f, 256f), ResizingBehavior.AspectFit, robotColor, armAngle);
    }
    
    public static void drawRobot(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int robotColor, float armAngle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint = CacheForRobot.paint;
        
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForRobot.resizedFrame;
        RobotStyleKit.resizingBehaviorApply(resizing, CacheForRobot.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 249f, resizedFrame.height() / 256f);
        
        // Rectangle
        RectF rectangleRect = CacheForRobot.rectangleRect;
        rectangleRect.set(59f, 85f, 184f, 188f);
        Path rectanglePath = CacheForRobot.rectanglePath;
        rectanglePath.reset();
        float rectangleCornerRadius = Math.min(Math.min(rectangleRect.width(), rectangleRect.height()) / 2f, 23f);
        float[] rectangleCornerRadii = CacheForRobot.rectangleCornerRadii;
        rectangleCornerRadii[0] = rectangleCornerRadii[1] = 0f;
        rectangleCornerRadii[2] = rectangleCornerRadii[3] = 0f;
        rectangleCornerRadii[4] = rectangleCornerRadii[5] = rectangleCornerRadius;
        rectangleCornerRadii[6] = rectangleCornerRadii[7] = rectangleCornerRadius;
        rectanglePath.addRoundRect(rectangleRect, rectangleCornerRadii, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(robotColor);
        canvas.drawPath(rectanglePath, paint);
        
        // Rectangle 2
        canvas.save();
        canvas.translate(41.19f, 95.4f);
        currentTransformation.peek().postTranslate(41.19f, 95.4f);
        canvas.rotate(-armAngle);
        currentTransformation.peek().postRotate(-armAngle);
        RectF rectangle2Rect = CacheForRobot.rectangle2Rect;
        rectangle2Rect.set(-11.19f, -10.4f, 8.81f, 61.6f);
        Path rectangle2Path = CacheForRobot.rectangle2Path;
        rectangle2Path.reset();
        rectangle2Path.addRoundRect(rectangle2Rect, 23f, 23f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(robotColor);
        canvas.drawPath(rectangle2Path, paint);
        canvas.restore();
        
        // Rectangle 3
        RectF rectangle3Rect = CacheForRobot.rectangle3Rect;
        rectangle3Rect.set(191f, 85f, 211f, 157f);
        Path rectangle3Path = CacheForRobot.rectangle3Path;
        rectangle3Path.reset();
        rectangle3Path.addRoundRect(rectangle3Rect, 23f, 23f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(robotColor);
        canvas.drawPath(rectangle3Path, paint);
        
        // Rectangle 4
        RectF rectangle4Rect = CacheForRobot.rectangle4Rect;
        rectangle4Rect.set(75f, 179f, 95f, 234f);
        Path rectangle4Path = CacheForRobot.rectangle4Path;
        rectangle4Path.reset();
        rectangle4Path.addRoundRect(rectangle4Rect, 23f, 23f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(robotColor);
        canvas.drawPath(rectangle4Path, paint);
        
        // Rectangle 5
        RectF rectangle5Rect = CacheForRobot.rectangle5Rect;
        rectangle5Rect.set(145f, 179f, 165f, 234f);
        Path rectangle5Path = CacheForRobot.rectangle5Path;
        rectangle5Path.reset();
        rectangle5Path.addRoundRect(rectangle5Rect, 23f, 23f, Path.Direction.CW);
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(robotColor);
        canvas.drawPath(rectangle5Path, paint);
        
        // Bezier 2
        RectF bezier2Rect = CacheForRobot.bezier2Rect;
        bezier2Rect.set(59.01f, 22.28f, 184f, 81.03f);
        Path bezier2Path = CacheForRobot.bezier2Path;
        bezier2Path.reset();
        bezier2Path.moveTo(143.69f, 22.4f);
        bezier2Path.cubicTo(144.72f, 22.77f, 145.26f, 23.92f, 144.88f, 24.96f);
        bezier2Path.cubicTo(144.88f, 24.96f, 143.02f, 30.07f, 140.44f, 37.15f);
        bezier2Path.cubicTo(165.74f, 43.06f, 184f, 60.48f, 184f, 81f);
        bezier2Path.lineTo(121.7f, 81f);
        bezier2Path.cubicTo(121.57f, 81f, 121.5f, 81f, 121.5f, 81f);
        bezier2Path.cubicTo(121.45f, 81.05f, 121.19f, 81.04f, 120.95f, 80.99f);
        bezier2Path.cubicTo(114.77f, 80.91f, 59.01f, 80.2f, 59.01f, 80.2f);
        bezier2Path.cubicTo(59.36f, 65.29f, 69.32f, 52.16f, 84.46f, 43.94f);
        bezier2Path.cubicTo(89.16f, 41.4f, 94.35f, 39.32f, 99.92f, 37.82f);
        bezier2Path.cubicTo(97.04f, 31.64f, 95.02f, 27.31f, 95.02f, 27.31f);
        bezier2Path.cubicTo(94.55f, 26.31f, 94.98f, 25.12f, 95.99f, 24.65f);
        bezier2Path.cubicTo(96.99f, 24.19f, 98.18f, 24.62f, 98.64f, 25.62f);
        bezier2Path.cubicTo(98.64f, 25.62f, 100.82f, 30.29f, 103.88f, 36.85f);
        bezier2Path.cubicTo(109.81f, 35.57f, 116.09f, 34.92f, 122.59f, 35.01f);
        bezier2Path.cubicTo(127.37f, 35.07f, 132.02f, 35.52f, 136.49f, 36.33f);
        bezier2Path.cubicTo(139.17f, 28.96f, 141.12f, 23.59f, 141.12f, 23.59f);
        bezier2Path.cubicTo(141.4f, 22.83f, 142.09f, 22.34f, 142.85f, 22.28f);
        bezier2Path.cubicTo(143.13f, 22.26f, 143.41f, 22.3f, 143.69f, 22.4f);
        bezier2Path.close();
        bezier2Path.moveTo(139.5f, 53f);
        bezier2Path.cubicTo(137.97f, 53f, 136.58f, 53.63f, 135.58f, 54.64f);
        bezier2Path.cubicTo(134.6f, 55.63f, 134f, 57f, 134f, 58.5f);
        bezier2Path.cubicTo(134f, 61.54f, 136.46f, 64f, 139.5f, 64f);
        bezier2Path.cubicTo(142.54f, 64f, 145f, 61.54f, 145f, 58.5f);
        bezier2Path.cubicTo(145f, 55.46f, 142.54f, 53f, 139.5f, 53f);
        bezier2Path.close();
        bezier2Path.moveTo(100.5f, 53f);
        bezier2Path.cubicTo(99.47f, 53f, 98.5f, 53.28f, 97.68f, 53.78f);
        bezier2Path.cubicTo(96.07f, 54.74f, 95f, 56.49f, 95f, 58.5f);
        bezier2Path.cubicTo(95f, 61.54f, 97.46f, 64f, 100.5f, 64f);
        bezier2Path.cubicTo(103.54f, 64f, 106f, 61.54f, 106f, 58.5f);
        bezier2Path.cubicTo(106f, 55.46f, 103.54f, 53f, 100.5f, 53f);
        bezier2Path.close();
        
        paint.reset();
        paint.setFlags(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(robotColor);
        canvas.drawPath(bezier2Path, paint);
        
        canvas.restore();
    }
    
    
    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }
        
        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }
        
        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;
        
        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }
        
        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
            target.centerY() - newHeight / 2,
            target.centerX() + newWidth / 2,
            target.centerY() + newHeight / 2);
    }
    
    
}